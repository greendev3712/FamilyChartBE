# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      - image: circleci/mysql:8.0-ram
      #  command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        command: mysqld
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      #- setup_remote_docker:
      #    docker_layer_caching: true
          
      # - run: docker-build
      - run: sudo apt-get update
      - run: sudo apt-get install lsb-release
      - run: wget https://dev.mysql.com/get/mysql-apt-config_0.8.15-1_all.deb
      - run: sudo dpkg -i mysql-apt-config_0.8.15-1_all.deb
      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo apt install -y mysql-client libxml2-dev libpng-dev libfreetype6-dev libjpeg62-turbo-dev libfreetype6-dev libpng-dev libjpeg-dev libzip-dev 
      #- run: sudo docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-webp-dir=/usr/include/  --with-jpeg-dir=/usr/include/ && \
      - run: sudo docker-php-ext-configure gd --with-freetype --with-jpeg
      - run: sudo docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd
      - run: sudo docker-php-ext-install zip pdo_mysql bcmath pcntl soap gd

      #- run: pecl install xdebug && docker-php-ext-enable xdebug
      - run: docker-php-ext-enable xdebug

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "client/package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "client/package.json" }}
          paths:
            - node_modules
      - run:
          name: Mysql database
          command: mysql  -h 127.0.0.1 -u root -e "create database enso;";mysql -uroot -p -e "GRANT ALL PRIVILEGES ON enso.* TO enso@127.0.0.1 IDENTIFIED BY 'password'"
      - run: cp .env.testing .env
      - run: php artisan key:generate
      - run: php artisan migrate
      - run: mkdir -p build/logs
      - run: cp -rf .env.testing-docker .env
      - run: php artisan config:cache --env=testing
      - run: php vendor/bin/phpunit
